##
## Chapman.edu/test-section/tatwell/fast-omni-nav/debug_format
## https://dev-cascade.chapman.edu/entity/open.act?id=72cd23f8c0a814531b32a4acd3357be4&type=format
##

#import( "/_cascade/formats/helpers/debug.velocity" )


##
## Macros
##
#macro ( exploreContentRoot )
  <pre>
    # inspectXML
    #inspectXML( $contentRoot )

    # _PropertyTool.outputProperties
    $_PropertyTool.outputProperties( $contentRoot )
  </pre>
#end

#macro ( demoCollections )
  #set ( $simpleArray = ['a', 'b', 'c', 'd'] )
  #set ( $nestedArray = [
    ['a', 'A'],
    ['b', 'B']
  ] )
  #set ( $simpleMap = {'a':1, 'b':2} )

  ## Lists support remove
  #set ( $lastIndex = $simpleArray.size() - 1 )
  #set ( $popped = $simpleArray.remove($lastIndex) )

  ## Arrays don't
  #set ( $myPath = '/foo/bar/baz')
  ## Arg is a regex.
  #set ( $pathArray = $myPath.split('\/') )
  #set ( $lastPathIndex = $pathArray.size() - 1 )
  #set ( $pathList = $_ListTool.toList($pathArray) )

  ## This throws following error when uncommented:
  ## An error occurred while rendering asset preview:
  ## org.apache.velocity.exception.MethodInvocationException: Invocation of method
  ## 'remove' in  class java.util.Arrays$ArrayList threw exception
  ##set ( $poppedPath = $pathList.remove($lastPathIndex) )

  <pre>
    # demoCollections
    simpleArray: $simpleArray
    simpleArray.size(): $simpleArray.size()

    nestedArray: $nestedArray
    nestedArray.size(): $nestedArray.size()

    simpleMap: $simpleMap
    simpleMap['a']: $simpleMap['a']
    simpleMap['nope']: $simpleMap['nope']

    lastIndex: $lastIndex
    popped: $popped

    pathList: ${_DisplayTool.list($pathList,"/")}
    lastPathIndex: $lastPathIndex
    poppedPath: $poppedPath
    \- isNull: $_PropertyTool.isNull($poppedPath)
  </pre>
#end

#macro ( testConditionalAssignment )
  #set ( $testArrayBig = ['a', 'b', 'c'] )
  #set ( $testArraySmall = ['d'] )
  #set ( $result1 = $testArrayBig.size() > 0 && $testArrayBig.size() > $testArraySmall.size() )
  #set ( $expectFalse = $testArrayBig.size() > 0 && $testArrayBig.size() < $testArraySmall.size() )
  #set ( $result2 = !$expectFalse )
  #assertResult( $result1 )
  #assertResult( $result2 )
#end

#macro ( assertResult $expectedToBeTrue )
  #if ( $expectedToBeTrue )
    <p style="color:green">OK</p>
  #else
    <p style="color:red">FAIL</p>
  #end
#end


##
## Main Format Block
##
<div id="format-main">
  #exploreContentRoot()
  #demoCollections()
  #testConditionalAssignment()
</div>
